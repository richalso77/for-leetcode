class Solution {
public:
    int minSubarray(vector<int>& nums, int p) {
        long long sum = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++){
            sum += nums[i];
        }
        sum %= p;
        if (sum == 0)   return 0;

        int current = 0;
        int ans = n;
        unordered_map<int, int> prefix;
        prefix[0] = -1;
        for (int i = 0; i < n; i++){
            current = (current + nums[i]) % p;
            int needed = (current - sum + p) % p;
            if (prefix.find(needed) != prefix.end()){
                ans = min(ans, i - prefix[needed]);
            }
            prefix[current] = i;
        }
        return ans == n ? -1 : ans;
    }
};
